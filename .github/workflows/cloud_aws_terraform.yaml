name: Terraform GitHub Actions to AWS

on:
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
  TF_TABLE: terraform-workload-lock
  TF_BUCKET: terraform-workload-data
  TF_REGION: ${{ secrets.AWS_REGION }}
  TF_VARIABLES: ${{ secrets.TF_VARIABLES }}

permissions:
  id-token: write
  contents: read
jobs:
  aws:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: cloud-aws-terraform/terraform
    steps:
      - id: checkout_project
        name: Checkout project
        uses: actions/checkout@v4
      - id: setup_terraform
        name: Setup terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
      - id: aws_auth
        name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-session-name: ${{ github.event.repository.name }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT }}:role/github-actions-role
          aws-region: ${{ env.AWS_REGION }}
      - id: terraform_variables
        name: Create terraform variables file on the current directory
        run: |
          echo "${{ env.TF_VARIABLES }}" > terraform.tfvars
      - id: terraform_init
        name: Initilize terraform by using the configuration files on the current directory
        run: |
          terraform init -backend-config="key=${{ github.event.repository.name }}/${{ env.AWS_REGION }}/terraform.tfstate" \
                         -backend-config="bucket=${{ env.TF_BUCKET }}" \
                         -backend-config="region=${{ env.TF_REGION }}" \
                         -backend-config="dynamodb_table=${{ env.TF_TABLE }}"
      - id: terraform_validate
        name: Validate terraform configuration files on current directory
        run: |
          terraform validate
      - id: terraform_plan
        name: Create terraform execution plan based on configuration files on the current directory
        run: |
          set +e
          terraform plan -var-file="terraform.tfvars" -out="terraform.plan" -detailed-exitcode
          has_changes=$?
          if [ ${has_changes} -eq 2 ]; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
          elif [ ${has_changes} -eq 0 ]; then
            echo "has-changes=false" >> $GITHUB_OUTPUT
          else
            exit 1
          fi
          exit 0
      - id: terraform_apply
        if: github.ref == 'refs/heads/master' && steps.terraform-plan.outputs.has-changes == 'true'
        name: Execute terraform plan based on configuration files on the current directory
        run: |
          terraform apply "terraform.plan"
